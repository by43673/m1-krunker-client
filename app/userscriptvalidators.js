"use strict";
var o=Object.defineProperty;var s=Object.getOwnPropertyDescriptor;var l=Object.getOwnPropertyNames;var p=Object.prototype.hasOwnProperty;var r=(n,t)=>{for(var e in t)o(n,e,{get:t[e],enumerable:!0})},f=(n,t,e,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of l(t))!p.call(n,a)&&a!==e&&o(n,a,{get:()=>t[a],enumerable:!(i=s(t,a))||i.enumerable});return n};var u=n=>f(o({},"__esModule",{value:!0}),n);var c={};r(c,{customSettingIsMalformed:()=>m,customSettingSavedJSONIsNotMalformed:()=>v});module.exports=u(c);const m=function(n){let t=!1;const e=n;switch(e.type){case"num":typeof e.value!="number"?t=`'${e.value}' (${typeof e.value}) is NOT a valid value for setting type '${e.type}.'`:"min"in e&&typeof e.min!="number"?t=`'${e.min}' is NOT a valid value for 'num' minimum value: .min MUST be a number.`:"max"in e&&typeof e.max!="number"?t=`'${e.min}' is NOT a valid value for 'num' maximum value: .max MUST be a number.`:"min"in e&&"max"in e&&e.min>e.max?t="Setting .min value cannot be greater than setting .max value.":"step"in e&&e.step<0?t="Setting .step value cannot be less than zero.":"step"in e&&"min"in e&&"max"in e&&e.step>e.max-e.min&&(t="Setting .step value cannot be greater than the difference between the .min and .max.");break;case"bool":typeof e.value!="boolean"&&(t=`'${e.value}' (${typeof e.value}) is NOT a valid value for setting type '${e.type}.'`);break;case"sel":"opts"in e?Array.isArray(e.opts)?e.opts.find(i=>!["number","string"].includes(typeof i))?t="All options (.opts) in setting type 'sel' need to be either NUMBERs or STRINGs.":e.opts.find(i=>typeof i!=typeof e.opts[0])?t="All options (.opts) in setting type 'sel' need to be the same type! (You cannot have both STRING and NUMBER options.)":e.opts.length<2?t="Setting type 'sel' must have at least 2 options to choose from!":e.opts.includes(e.value)||(t=`Setting type 'sel' must have its value set to one of the options defined in .opts! (${e.opts.join(",")})`):t="Setting type 'sel' requires the .opts property to be an ARRAY! (Example: {opts: ['option1', 'option2'...]})":t="Setting type 'sel' requires property .opts as an array with each option for this setting. (Example: {opts: ['option1', 'option2'...]})";break;case"color":typeof e.value!="string"?t=`'${e.value}' (${typeof e.value}) is NOT a valid value for setting type '${e.type}.'`:e.value.match(/^#([0-9a-fA-F]{3}){2}$/g)||(t=`'${e.value}' is not a valid color. Use #ffffff`);break;default:t=`'${e.type}' is NOT a valid setting type.`;break}return"title"in e&&e.title.length<1&&(t=`'${e?.title}' is NOT a valid setting title.`),"changed"in e?typeof e.changed!="function"&&(t="Custom setting .changed property MUST be a function. (Example: {changed: (value) => {}})"):t="Custom setting requires .changed() function property.",t},v=function(n,t,e){return n in t&&typeof t[n].changed=="function"&&e[n]!==t[n].value&&typeof e[n]==typeof t[n].value};0&&(module.exports={customSettingIsMalformed,customSettingSavedJSONIsNotMalformed});
